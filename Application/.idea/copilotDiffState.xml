<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/FIX_STOP_NAMES.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/edu/hackyeah/MainActivity.kt" />
              <option name="originalContent" value="package com.edu.hackyeah&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import com.edu.hackyeah.components.Dashboard&#10;import com.edu.hackyeah.ui.theme.MyApplicationTheme&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            MyApplicationTheme {&#10;                Scaffold(modifier = Modifier.fillMaxSize()) {&#10;                    Dashboard()&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.edu.hackyeah&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import com.edu.hackyeah.components.MainNavigation&#10;import com.edu.hackyeah.ui.theme.MyApplicationTheme&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            MyApplicationTheme {&#10;                MainNavigation()&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/edu/hackyeah/components/Dashboard.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/edu/hackyeah/components/Dashboard.kt" />
              <option name="originalContent" value="package com.edu.hackyeah.components&#10;&#10;import android.Manifest&#10;import android.annotation.SuppressLint&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.MyLocation&#10;import androidx.compose.material.icons.filled.Place&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material.icons.outlined.TripOrigin&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.IconButtonDefaults&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.shadow&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.edu.hackyeah.location.DestinationPoint&#10;import com.edu.hackyeah.location.TransportRouteResult&#10;import kotlinx.coroutines.launch&#10;import com.edu.hackyeah.location.LocationHelper&#10;import java.time.Instant&#10;&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun Dashboard() {&#10;    var destinationPoints by remember {&#10;        mutableStateOf&lt;List&lt;DestinationPoint&gt;&gt;(&#10;            emptyList()&#10;        )&#10;    }&#10;    var fromLocation by remember { mutableStateOf(&quot;&quot;) }&#10;    var toLocation by remember { mutableStateOf(&quot;&quot;) }&#10;    var showRouteTile by remember { mutableStateOf(false) }&#10;    var showRouteDetails by remember { mutableStateOf(false) }&#10;    var errorMessage by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    var isSearching by remember { mutableStateOf(false) }&#10;    var routeResult by remember { mutableStateOf&lt;TransportRouteResult?&gt;(null) }&#10;    val context = LocalContext.current&#10;    val locationHelper = remember { LocationHelper(context) }&#10;    val coroutineScope = rememberCoroutineScope()&#10;&#10;    // Load available stop names&#10;    val availableStops = remember { locationHelper.getAllStopNames() }&#10;&#10;    val permissionLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.RequestMultiplePermissions()&#10;    ) { permissions: Map&lt;String, @JvmSuppressWildcards Boolean&gt; -&gt;&#10;        if (permissions[Manifest.permission.ACCESS_FINE_LOCATION] == true || permissions[Manifest.permission.ACCESS_COARSE_LOCATION] == true) {&#10;            coroutineScope.launch {&#10;                try {&#10;                    @SuppressLint(&quot;MissingPermission&quot;)&#10;                    val address = locationHelper.getCurrentAddress()&#10;                    if (address != null) {&#10;                        fromLocation = address&#10;                        errorMessage = null&#10;                    } else {&#10;                        errorMessage = &quot;Nie można pobrać lokalizacji. Upewnij się, że GPS jest włączony.&quot;&#10;                    }&#10;                } catch (e: Exception) {&#10;                    errorMessage = &quot;Błąd podczas pobierania lokalizacji: ${e.message}&quot;&#10;                }&#10;            }&#10;        } else {&#10;            errorMessage = &quot;Brak uprawnień do lokalizacji&quot;&#10;        }&#10;    }&#10;&#10;    // Show route details view when clicked&#10;    if (showRouteDetails) {&#10;        RouteDetailsView(&#10;            routeResult = routeResult ?: return,&#10;            onBackClick = {&#10;                showRouteDetails = false&#10;            }&#10;        )&#10;        return&#10;    }&#10;&#10;    Scaffold(&#10;        modifier = Modifier.fillMaxSize(),&#10;        containerColor = Color(0xFFF8F9FA)&#10;    ) { paddingValues -&gt;&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .background(&#10;                    Brush.verticalGradient(&#10;                        colors = listOf(&#10;                            Color(0xFFE3F2FD),&#10;                            Color(0xFFF8F9FA)&#10;                        )&#10;                    )&#10;                )&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .verticalScroll(rememberScrollState())&#10;                    .padding(20.dp),&#10;                verticalArrangement = Arrangement.spacedBy(20.dp)&#10;            ) {&#10;                // Welcome Card&#10;                Card(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = Color.White&#10;                    ),&#10;                    elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),&#10;                    shape = RoundedCornerShape(16.dp)&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(20.dp)&#10;                    ) {&#10;                        Text(&#10;                            &quot;Journey Radar&quot;,&#10;                            fontSize = 24.sp,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = Color(0xFF1976D2)&#10;                        )&#10;                        Spacer(modifier = Modifier.height(4.dp))&#10;                        Text(&#10;                            &quot;Znajdź najlepszą trasę do swojego celu&quot;,&#10;                            fontSize = 14.sp,&#10;                            color = Color(0xFF666666)&#10;                        )&#10;                    }&#10;                }&#10;&#10;                // Search Card&#10;                Card(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .shadow(&#10;                            elevation = 8.dp,&#10;                            shape = RoundedCornerShape(20.dp),&#10;                            spotColor = Color(0xFF1976D2).copy(alpha = 0.1f)&#10;                        ),&#10;                    colors = CardDefaults.cardColors(containerColor = Color.White),&#10;                    shape = RoundedCornerShape(20.dp)&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(24.dp),&#10;                        verticalArrangement = Arrangement.spacedBy(20.dp)&#10;                    ) {&#10;                        Text(&#10;                            &quot;Planuj trasę&quot;,&#10;                            fontSize = 18.sp,&#10;                            fontWeight = FontWeight.SemiBold,&#10;                            color = Color(0xFF333333)&#10;                        )&#10;&#10;                        // From Location with icon indicator&#10;                        Column(verticalArrangement = Arrangement.spacedBy(8.dp)) {&#10;                            Row(&#10;                                verticalAlignment = Alignment.CenterVertically,&#10;                                horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                            ) {&#10;                                Box(&#10;                                    modifier = Modifier&#10;                                        .size(10.dp)&#10;                                        .background(Color(0xFF4CAF50), CircleShape)&#10;                                )&#10;                                Text(&#10;                                    &quot;Punkt startowy&quot;,&#10;                                    fontSize = 12.sp,&#10;                                    fontWeight = FontWeight.Medium,&#10;                                    color = Color(0xFF666666)&#10;                                )&#10;                            }&#10;&#10;                            AutocompleteStopField(&#10;                                value = fromLocation,&#10;                                onValueChange = { fromLocation = it },&#10;                                placeholder = &quot;Wpisz nazwę przystanku&quot;,&#10;                                availableStops = availableStops,&#10;                                leadingIcon = {&#10;                                    Icon(&#10;                                        Icons.Outlined.TripOrigin,&#10;                                        contentDescription = null,&#10;                                        tint = Color(0xFF4CAF50),&#10;                                        modifier = Modifier.size(22.dp)&#10;                                    )&#10;                                },&#10;                                trailingIcon = {&#10;                                    IconButton(&#10;                                        onClick = {&#10;                                            permissionLauncher.launch(&#10;                                                arrayOf(&#10;                                                    Manifest.permission.ACCESS_FINE_LOCATION,&#10;                                                    Manifest.permission.ACCESS_COARSE_LOCATION&#10;                                                )&#10;                                            )&#10;                                        },&#10;                                        colors = IconButtonDefaults.iconButtonColors(&#10;                                            containerColor = Color(0xFF1976D2).copy(alpha = 0.1f)&#10;                                        ),&#10;                                        modifier = Modifier.size(40.dp)&#10;                                    ) {&#10;                                        Icon(&#10;                                            Icons.Default.MyLocation,&#10;                                            contentDescription = &quot;Użyj mojej lokalizacji&quot;,&#10;                                            tint = Color(0xFF1976D2),&#10;                                            modifier = Modifier.size(20.dp)&#10;                                        )&#10;                                    }&#10;                                }&#10;                            )&#10;                        }&#10;&#10;                        // Swap Button&#10;                        Box(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            contentAlignment = Alignment.Center&#10;                        ) {&#10;                            IconButton(&#10;                                onClick = {&#10;                                    // Swap locations&#10;                                    val temp = fromLocation&#10;                                    fromLocation = toLocation&#10;                                    toLocation = temp&#10;                                },&#10;                                colors = IconButtonDefaults.iconButtonColors(&#10;                                    containerColor = Color(0xFF1976D2).copy(alpha = 0.1f)&#10;                                ),&#10;                                modifier = Modifier.size(48.dp)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                                    contentDescription = &quot;Zamień miejscami&quot;,&#10;                                    tint = Color(0xFF1976D2),&#10;                                    modifier = Modifier.size(24.dp)&#10;                                )&#10;                            }&#10;                        }&#10;&#10;                        // To Location with icon indicator&#10;                        Column(verticalArrangement = Arrangement.spacedBy(8.dp)) {&#10;                            Row(&#10;                                verticalAlignment = Alignment.CenterVertically,&#10;                                horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                            ) {&#10;                                Box(&#10;                                    modifier = Modifier&#10;                                        .size(10.dp)&#10;                                        .background(Color(0xFFF44336), CircleShape)&#10;                                )&#10;                                Text(&#10;                                    &quot;Punkt docelowy&quot;,&#10;                                    fontSize = 12.sp,&#10;                                    fontWeight = FontWeight.Medium,&#10;                                    color = Color(0xFF666666)&#10;                                )&#10;                            }&#10;&#10;                            AutocompleteStopField(&#10;                                value = toLocation,&#10;                                onValueChange = { toLocation = it },&#10;                                placeholder = &quot;Dokąd chcesz pojechać?&quot;,&#10;                                availableStops = availableStops,&#10;                                leadingIcon = {&#10;                                    Icon(&#10;                                        Icons.Default.Place,&#10;                                        contentDescription = null,&#10;                                        tint = Color(0xFFF44336),&#10;                                        modifier = Modifier.size(22.dp)&#10;                                    )&#10;                                }&#10;                            )&#10;                        }&#10;&#10;                        // Search Button&#10;                        Button(&#10;                            onClick = {&#10;                                errorMessage = null&#10;                                isSearching = true&#10;&#10;                                coroutineScope.launch {&#10;                                    try {&#10;                                        // Validate inputs&#10;                                        if (fromLocation.length &lt; 3 || toLocation.length &lt; 3) {&#10;                                            errorMessage = &quot;Proszę wpisać pełne adresy (minimum 3 znaki)&quot;&#10;                                            isSearching = false&#10;                                            return@launch&#10;                                        }&#10;&#10;                                        println(&quot;Searching transport route from: $fromLocation to: $toLocation&quot;)&#10;&#10;                                        // Get transport route from new API&#10;                                        val result = locationHelper.getTransportRoute(&#10;                                            sourceAddress = fromLocation,&#10;                                            targetAddress = toLocation&#10;                                        )&#10;&#10;                                        if (result == null) {&#10;                                            errorMessage = &quot;Nie znaleziono trasy. Sprawdź nazwy przystanków.&quot;&#10;                                            isSearching = false&#10;                                            return@launch&#10;                                        }&#10;&#10;                                        // Update route result and destination points&#10;                                        routeResult = result&#10;                                        destinationPoints = result.defaultPath&#10;&#10;                                        // Show incident warning if detected&#10;                                        if (result.incidentDetected) {&#10;                                            errorMessage = result.message ?: &quot;Wykryto incydent na trasie - pokazano alternatywną trasę&quot;&#10;                                        }&#10;&#10;                                        // Show route tile with real data&#10;                                        showRouteTile = true&#10;                                        isSearching = false&#10;&#10;                                    } catch (e: Exception) {&#10;                                        errorMessage = &quot;Błąd wyszukiwania: ${e.message}&quot;&#10;                                        isSearching = false&#10;                                        e.printStackTrace()&#10;                                    }&#10;                                }&#10;                            },&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .height(56.dp)&#10;                                .shadow(&#10;                                    elevation = 4.dp,&#10;                                    shape = RoundedCornerShape(12.dp),&#10;                                    spotColor = Color(0xFF1976D2).copy(alpha = 0.3f)&#10;                                ),&#10;                            colors = ButtonDefaults.buttonColors(&#10;                                containerColor = Color(0xFF1976D2),&#10;                                disabledContainerColor = Color(0xFFBDBDBD)&#10;                            ),&#10;                            shape = RoundedCornerShape(12.dp),&#10;                            enabled = fromLocation.isNotBlank() &amp;&amp; toLocation.isNotBlank() &amp;&amp; !isSearching&#10;                        ) {&#10;                            Icon(&#10;                                Icons.Default.Search,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(22.dp)&#10;                            )&#10;                            Spacer(modifier = Modifier.width(12.dp))&#10;                            Text(&#10;                                if (isSearching) &quot;Wyszukiwanie...&quot; else &quot;Znajdź trasę&quot;,&#10;                                fontSize = 16.sp,&#10;                                fontWeight = FontWeight.SemiBold,&#10;                                letterSpacing = 0.5.sp&#10;                            )&#10;                        }&#10;&#10;                        // Error message&#10;                        if (errorMessage != null) {&#10;                            Card(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                colors = CardDefaults.cardColors(&#10;                                    containerColor = Color(0xFFFFEBEE)&#10;                                ),&#10;                                shape = RoundedCornerShape(8.dp)&#10;                            ) {&#10;                                Text(&#10;                                    text = errorMessage!!,&#10;                                    color = Color(0xFFD32F2F),&#10;                                    fontSize = 13.sp,&#10;                                    modifier = Modifier.padding(12.dp),&#10;                                    lineHeight = 18.sp&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;&#10;                // Route Tile - displayed with real data&#10;                if (showRouteTile) {&#10;                    RouteTile(&#10;                        destinationPoints = destinationPoints,&#10;                        onClick = {&#10;                            showRouteDetails = true&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.edu.hackyeah.components&#10;&#10;import android.Manifest&#10;import android.annotation.SuppressLint&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.MyLocation&#10;import androidx.compose.material.icons.filled.Place&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material.icons.outlined.TripOrigin&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.IconButtonDefaults&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.shadow&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.edu.hackyeah.location.DestinationPoint&#10;import com.edu.hackyeah.location.TransportRouteResult&#10;import kotlinx.coroutines.launch&#10;import com.edu.hackyeah.location.LocationHelper&#10;&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun Dashboard() {&#10;    var destinationPoints by remember {&#10;        mutableStateOf&lt;List&lt;DestinationPoint&gt;&gt;(&#10;            emptyList()&#10;        )&#10;    }&#10;    var fromLocation by remember { mutableStateOf(&quot;&quot;) }&#10;    var toLocation by remember { mutableStateOf(&quot;&quot;) }&#10;    var showRouteTile by remember { mutableStateOf(false) }&#10;    var showRouteDetails by remember { mutableStateOf(false) }&#10;    var errorMessage by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    var isSearching by remember { mutableStateOf(false) }&#10;    var routeResult by remember { mutableStateOf&lt;TransportRouteResult?&gt;(null) }&#10;    val context = LocalContext.current&#10;    val locationHelper = remember { LocationHelper(context) }&#10;    val coroutineScope = rememberCoroutineScope()&#10;&#10;    // Load available stop names&#10;    val availableStops = remember { locationHelper.getAllStopNames() }&#10;&#10;    val permissionLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.RequestMultiplePermissions()&#10;    ) { permissions: Map&lt;String, @JvmSuppressWildcards Boolean&gt; -&gt;&#10;        if (permissions[Manifest.permission.ACCESS_FINE_LOCATION] == true || permissions[Manifest.permission.ACCESS_COARSE_LOCATION] == true) {&#10;            coroutineScope.launch {&#10;                try {&#10;                    @SuppressLint(&quot;MissingPermission&quot;)&#10;                    val address = locationHelper.getCurrentAddress()&#10;                    if (address != null) {&#10;                        fromLocation = address&#10;                        errorMessage = null&#10;                    } else {&#10;                        errorMessage = &quot;Nie można pobrać lokalizacji. Upewnij się, że GPS jest włączony.&quot;&#10;                    }&#10;                } catch (e: Exception) {&#10;                    errorMessage = &quot;Błąd podczas pobierania lokalizacji: ${e.message}&quot;&#10;                }&#10;            }&#10;        } else {&#10;            errorMessage = &quot;Brak uprawnień do lokalizacji&quot;&#10;        }&#10;    }&#10;&#10;    // Show route details view when clicked&#10;    if (showRouteDetails) {&#10;        RouteDetailsView(&#10;            routeResult = routeResult ?: return,&#10;            onBackClick = {&#10;                showRouteDetails = false&#10;            }&#10;        )&#10;        return&#10;    }&#10;&#10;    Scaffold(&#10;        modifier = Modifier.fillMaxSize(),&#10;        containerColor = Color(0xFFF8F9FA)&#10;    ) { paddingValues -&gt;&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .background(&#10;                    Brush.verticalGradient(&#10;                        colors = listOf(&#10;                            Color(0xFFE3F2FD),&#10;                            Color(0xFFF8F9FA)&#10;                        )&#10;                    )&#10;                )&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .verticalScroll(rememberScrollState())&#10;                    .padding(20.dp),&#10;                verticalArrangement = Arrangement.spacedBy(20.dp)&#10;            ) {&#10;                // Welcome Card&#10;                Card(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = Color.White&#10;                    ),&#10;                    elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),&#10;                    shape = RoundedCornerShape(16.dp)&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(20.dp)&#10;                    ) {&#10;                        Text(&#10;                            &quot;Journey Radar&quot;,&#10;                            fontSize = 24.sp,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = Color(0xFF1976D2)&#10;                        )&#10;                        Spacer(modifier = Modifier.height(4.dp))&#10;                        Text(&#10;                            &quot;Znajdź najlepszą trasę do swojego celu&quot;,&#10;                            fontSize = 14.sp,&#10;                            color = Color(0xFF666666)&#10;                        )&#10;                    }&#10;                }&#10;&#10;                // Search Card&#10;                Card(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .shadow(&#10;                            elevation = 8.dp,&#10;                            shape = RoundedCornerShape(20.dp),&#10;                            spotColor = Color(0xFF1976D2).copy(alpha = 0.1f)&#10;                        ),&#10;                    colors = CardDefaults.cardColors(containerColor = Color.White),&#10;                    shape = RoundedCornerShape(20.dp)&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(24.dp),&#10;                        verticalArrangement = Arrangement.spacedBy(20.dp)&#10;                    ) {&#10;                        Text(&#10;                            &quot;Planuj trasę&quot;,&#10;                            fontSize = 18.sp,&#10;                            fontWeight = FontWeight.SemiBold,&#10;                            color = Color(0xFF333333)&#10;                        )&#10;&#10;                        // From Location with icon indicator&#10;                        Column(verticalArrangement = Arrangement.spacedBy(8.dp)) {&#10;                            Row(&#10;                                verticalAlignment = Alignment.CenterVertically,&#10;                                horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                            ) {&#10;                                Box(&#10;                                    modifier = Modifier&#10;                                        .size(10.dp)&#10;                                        .background(Color(0xFF4CAF50), CircleShape)&#10;                                )&#10;                                Text(&#10;                                    &quot;Punkt startowy&quot;,&#10;                                    fontSize = 12.sp,&#10;                                    fontWeight = FontWeight.Medium,&#10;                                    color = Color(0xFF666666)&#10;                                )&#10;                            }&#10;&#10;                            AutocompleteStopField(&#10;                                value = fromLocation,&#10;                                onValueChange = { fromLocation = it },&#10;                                placeholder = &quot;Wpisz nazwę przystanku&quot;,&#10;                                availableStops = availableStops,&#10;                                leadingIcon = {&#10;                                    Icon(&#10;                                        Icons.Outlined.TripOrigin,&#10;                                        contentDescription = null,&#10;                                        tint = Color(0xFF4CAF50),&#10;                                        modifier = Modifier.size(22.dp)&#10;                                    )&#10;                                },&#10;                                trailingIcon = {&#10;                                    IconButton(&#10;                                        onClick = {&#10;                                            permissionLauncher.launch(&#10;                                                arrayOf(&#10;                                                    Manifest.permission.ACCESS_FINE_LOCATION,&#10;                                                    Manifest.permission.ACCESS_COARSE_LOCATION&#10;                                                )&#10;                                            )&#10;                                        },&#10;                                        colors = IconButtonDefaults.iconButtonColors(&#10;                                            containerColor = Color(0xFF1976D2).copy(alpha = 0.1f)&#10;                                        ),&#10;                                        modifier = Modifier.size(40.dp)&#10;                                    ) {&#10;                                        Icon(&#10;                                            Icons.Default.MyLocation,&#10;                                            contentDescription = &quot;Użyj mojej lokalizacji&quot;,&#10;                                            tint = Color(0xFF1976D2),&#10;                                            modifier = Modifier.size(20.dp)&#10;                                        )&#10;                                    }&#10;                                }&#10;                            )&#10;                        }&#10;&#10;                        // Swap Button&#10;                        Box(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            contentAlignment = Alignment.Center&#10;                        ) {&#10;                            IconButton(&#10;                                onClick = {&#10;                                    // Swap locations&#10;                                    val temp = fromLocation&#10;                                    fromLocation = toLocation&#10;                                    toLocation = temp&#10;                                },&#10;                                colors = IconButtonDefaults.iconButtonColors(&#10;                                    containerColor = Color(0xFF1976D2).copy(alpha = 0.1f)&#10;                                ),&#10;                                modifier = Modifier.size(48.dp)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                                    contentDescription = &quot;Zamień miejscami&quot;,&#10;                                    tint = Color(0xFF1976D2),&#10;                                    modifier = Modifier.size(24.dp)&#10;                                )&#10;                            }&#10;                        }&#10;&#10;                        // To Location with icon indicator&#10;                        Column(verticalArrangement = Arrangement.spacedBy(8.dp)) {&#10;                            Row(&#10;                                verticalAlignment = Alignment.CenterVertically,&#10;                                horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                            ) {&#10;                                Box(&#10;                                    modifier = Modifier&#10;                                        .size(10.dp)&#10;                                        .background(Color(0xFFF44336), CircleShape)&#10;                                )&#10;                                Text(&#10;                                    &quot;Punkt docelowy&quot;,&#10;                                    fontSize = 12.sp,&#10;                                    fontWeight = FontWeight.Medium,&#10;                                    color = Color(0xFF666666)&#10;                                )&#10;                            }&#10;&#10;                            AutocompleteStopField(&#10;                                value = toLocation,&#10;                                onValueChange = { toLocation = it },&#10;                                placeholder = &quot;Dokąd chcesz pojechać?&quot;,&#10;                                availableStops = availableStops,&#10;                                leadingIcon = {&#10;                                    Icon(&#10;                                        Icons.Default.Place,&#10;                                        contentDescription = null,&#10;                                        tint = Color(0xFFF44336),&#10;                                        modifier = Modifier.size(22.dp)&#10;                                    )&#10;                                }&#10;                            )&#10;                        }&#10;&#10;                        // Search Button&#10;                        Button(&#10;                            onClick = {&#10;                                errorMessage = null&#10;                                isSearching = true&#10;&#10;                                coroutineScope.launch {&#10;                                    try {&#10;                                        // Validate inputs&#10;                                        if (fromLocation.length &lt; 3 || toLocation.length &lt; 3) {&#10;                                            errorMessage = &quot;Proszę wpisać pełne adresy (minimum 3 znaki)&quot;&#10;                                            isSearching = false&#10;                                            return@launch&#10;                                        }&#10;&#10;                                        println(&quot;Searching transport route from: $fromLocation to: $toLocation&quot;)&#10;&#10;                                        // Get transport route from new API&#10;                                        val result = locationHelper.getTransportRoute(&#10;                                            sourceAddress = fromLocation,&#10;                                            targetAddress = toLocation&#10;                                        )&#10;&#10;                                        if (result == null) {&#10;                                            errorMessage = &quot;Nie znaleziono trasy. Sprawdź nazwy przystanków.&quot;&#10;                                            isSearching = false&#10;                                            return@launch&#10;                                        }&#10;&#10;                                        // Update route result and destination points&#10;                                        routeResult = result&#10;                                        destinationPoints = result.defaultPath&#10;&#10;                                        // Show incident warning if detected&#10;                                        if (result.incidentDetected) {&#10;                                            errorMessage = result.message ?: &quot;Wykryto incydent na trasie - pokazano alternatywną trasę&quot;&#10;                                        }&#10;&#10;                                        // Show route tile with real data&#10;                                        showRouteTile = true&#10;                                        isSearching = false&#10;&#10;                                    } catch (e: Exception) {&#10;                                        errorMessage = &quot;Błąd wyszukiwania: ${e.message}&quot;&#10;                                        isSearching = false&#10;                                        e.printStackTrace()&#10;                                    }&#10;                                }&#10;                            },&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .height(56.dp)&#10;                                .shadow(&#10;                                    elevation = 4.dp,&#10;                                    shape = RoundedCornerShape(12.dp),&#10;                                    spotColor = Color(0xFF1976D2).copy(alpha = 0.3f)&#10;                                ),&#10;                            colors = ButtonDefaults.buttonColors(&#10;                                containerColor = Color(0xFF1976D2),&#10;                                disabledContainerColor = Color(0xFFBDBDBD)&#10;                            ),&#10;                            shape = RoundedCornerShape(12.dp),&#10;                            enabled = fromLocation.isNotBlank() &amp;&amp; toLocation.isNotBlank() &amp;&amp; !isSearching&#10;                        ) {&#10;                            Icon(&#10;                                Icons.Default.Search,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(22.dp)&#10;                            )&#10;                            Spacer(modifier = Modifier.width(12.dp))&#10;                            Text(&#10;                                if (isSearching) &quot;Wyszukiwanie...&quot; else &quot;Znajdź trasę&quot;,&#10;                                fontSize = 16.sp,&#10;                                fontWeight = FontWeight.SemiBold,&#10;                                letterSpacing = 0.5.sp&#10;                            )&#10;                        }&#10;&#10;                        // Error message&#10;                        if (errorMessage != null) {&#10;                            Card(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                colors = CardDefaults.cardColors(&#10;                                    containerColor = Color(0xFFFFEBEE)&#10;                                ),&#10;                                shape = RoundedCornerShape(8.dp)&#10;                            ) {&#10;                                Text(&#10;                                    text = errorMessage!!,&#10;                                    color = Color(0xFFD32F2F),&#10;                                    fontSize = 13.sp,&#10;                                    modifier = Modifier.padding(12.dp),&#10;                                    lineHeight = 18.sp&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;&#10;                // Route Tile - displayed with real data&#10;                if (showRouteTile) {&#10;                    RouteTile(&#10;                        destinationPoints = destinationPoints,&#10;                        onClick = {&#10;                            showRouteDetails = true&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>