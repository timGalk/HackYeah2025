<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/edu/hackyeah/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/edu/hackyeah/MainActivity.kt" />
              <option name="originalContent" value="package com.edu.hackyeah&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import com.edu.hackyeah.components.Dashboard&#10;import com.edu.hackyeah.ui.theme.MyApplicationTheme&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            MyApplicationTheme {&#10;                Scaffold(modifier = Modifier.fillMaxSize()) {&#10;                    Dashboard()&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.edu.hackyeah&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import com.edu.hackyeah.components.MainNavigation&#10;import com.edu.hackyeah.ui.theme.MyApplicationTheme&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            MyApplicationTheme {&#10;                MainNavigation()&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/edu/hackyeah/components/IncidentsScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/edu/hackyeah/components/IncidentsScreen.kt" />
              <option name="originalContent" value="&#10;&#10;&#10;&#10;" />
              <option name="updatedContent" value="package com.edu.hackyeah.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material.icons.filled.Warning&#10;import androidx.compose.material.icons.filled.Info&#10;import androidx.compose.material.icons.filled.Build&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.FloatingActionButton&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.material3.TopAppBarDefaults&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;&#10;data class Incident(&#10;    val type: String,&#10;    val location: String,&#10;    val description: String,&#10;    val time: String,&#10;    val icon: ImageVector,&#10;    val color: Color&#10;)&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun IncidentsScreen() {&#10;    // Sample incidents data&#10;    val incidents = listOf(&#10;        Incident(&#10;            type = &quot;Wypadek&quot;,&#10;            location = &quot;A4, Kraków - Katowice&quot;,&#10;            description = &quot;Kolizja 2 pojazdów, ruch ograniczony&quot;,&#10;            time = &quot;5 min temu&quot;,&#10;            icon = Icons.Default.Warning,&#10;            color = Color(0xFFD32F2F)&#10;        ),&#10;        Incident(&#10;            type = &quot;Korek&quot;,&#10;            location = &quot;Rondo Mogilskie, Kraków&quot;,&#10;            description = &quot;Duże natężenie ruchu&quot;,&#10;            time = &quot;15 min temu&quot;,&#10;            icon = Icons.Default.Info,&#10;            color = Color(0xFFF57C00)&#10;        ),&#10;        Incident(&#10;            type = &quot;Roboty drogowe&quot;,&#10;            location = &quot;ul. Wielicka, Kraków&quot;,&#10;            description = &quot;Remont jezdni, zwężenie pasa&quot;,&#10;            time = &quot;1 godz. temu&quot;,&#10;            icon = Icons.Default.Build,&#10;            color = Color(0xFFFBC02D)&#10;        ),&#10;        Incident(&#10;            type = &quot;Ostrzeżenie&quot;,&#10;            location = &quot;S7, Chyżne - granica&quot;,&#10;            description = &quot;Gołoledź na drodze&quot;,&#10;            time = &quot;2 godz. temu&quot;,&#10;            icon = Icons.Default.Warning,&#10;            color = Color(0xFF1976D2)&#10;        )&#10;    )&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = {&#10;                    Text(&#10;                        &quot;Incydenty drogowe&quot;,&#10;                        fontSize = 20.sp,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                },&#10;                colors = TopAppBarDefaults.topAppBarColors(&#10;                    containerColor = Color(0xFF1976D2),&#10;                    titleContentColor = Color.White&#10;                )&#10;            )&#10;        },&#10;        floatingActionButton = {&#10;            FloatingActionButton(&#10;                onClick = { /* TODO: Open report incident dialog */ },&#10;                containerColor = Color(0xFF1976D2),&#10;                contentColor = Color.White&#10;            ) {&#10;                Icon(&#10;                    Icons.Default.Add,&#10;                    contentDescription = &quot;Zgłoś incydent&quot;,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;            }&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .background(Color(0xFFF5F5F5))&#10;        ) {&#10;            // Header stats&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),&#10;                colors = CardDefaults.cardColors(containerColor = Color.White),&#10;                shape = RoundedCornerShape(12.dp)&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(16.dp),&#10;                    horizontalArrangement = Arrangement.SpaceAround&#10;                ) {&#10;                    StatItem(&quot;Aktywne&quot;, &quot;${incidents.size}&quot;)&#10;                    StatItem(&quot;Dzisiaj&quot;, &quot;12&quot;)&#10;                    StatItem(&quot;Twoje&quot;, &quot;3&quot;)&#10;                }&#10;            }&#10;&#10;            // Incidents list&#10;            LazyColumn(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(horizontal = 16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(12.dp)&#10;            ) {&#10;                items(incidents.size) { index -&gt;&#10;                    IncidentCard(incident = incidents[index])&#10;                }&#10;&#10;                // Bottom spacing&#10;                item {&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun StatItem(label: String, value: String) {&#10;    Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;        Text(&#10;            text = value,&#10;            fontSize = 24.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            color = Color(0xFF1976D2)&#10;        )&#10;        Text(&#10;            text = label,&#10;            fontSize = 12.sp,&#10;            color = Color(0xFF757575)&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun IncidentCard(incident: Incident) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .clickable { /* TODO: Show incident details */ },&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),&#10;        colors = CardDefaults.cardColors(containerColor = Color.White),&#10;        shape = RoundedCornerShape(12.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.Top&#10;        ) {&#10;            // Icon&#10;            Icon(&#10;                incident.icon,&#10;                contentDescription = null,&#10;                modifier = Modifier&#10;                    .size(48.dp)&#10;                    .clip(CircleShape)&#10;                    .background(incident.color.copy(alpha = 0.1f))&#10;                    .padding(12.dp),&#10;                tint = incident.color&#10;            )&#10;&#10;            // Content&#10;            Column(&#10;                modifier = Modifier&#10;                    .weight(1f)&#10;                    .padding(start = 12.dp)&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = incident.type,&#10;                        fontSize = 16.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = Color(0xFF212121)&#10;                    )&#10;                    Text(&#10;                        text = incident.time,&#10;                        fontSize = 12.sp,&#10;                        color = Color(0xFF757575)&#10;                    )&#10;                }&#10;&#10;                Text(&#10;                    text = incident.location,&#10;                    fontSize = 14.sp,&#10;                    fontWeight = FontWeight.Medium,&#10;                    color = Color(0xFF1976D2),&#10;                    modifier = Modifier.padding(top = 4.dp)&#10;                )&#10;&#10;                Text(&#10;                    text = incident.description,&#10;                    fontSize = 14.sp,&#10;                    color = Color(0xFF757575),&#10;                    modifier = Modifier.padding(top = 4.dp)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/edu/hackyeah/components/MainNavigation.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/edu/hackyeah/components/MainNavigation.kt" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.edu.hackyeah.components&#10;&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Home&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material.icons.filled.Warning&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.NavigationBar&#10;import androidx.compose.material3.NavigationBarItem&#10;import androidx.compose.material3.NavigationBarItemDefaults&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableIntStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;&#10;sealed class NavigationItem(&#10;    val route: String,&#10;    val icon: ImageVector,&#10;    val label: String&#10;) {&#10;    object Home : NavigationItem(&quot;home&quot;, Icons.Default.Home, &quot;Trasy&quot;)&#10;    object Incidents : NavigationItem(&quot;incidents&quot;, Icons.Default.Warning, &quot;Incydenty&quot;)&#10;    object Profile : NavigationItem(&quot;profile&quot;, Icons.Default.Person, &quot;Profil&quot;)&#10;    object Settings : NavigationItem(&quot;settings&quot;, Icons.Default.Settings, &quot;Ustawienia&quot;)&#10;}&#10;&#10;@Composable&#10;fun MainNavigation() {&#10;    var selectedItemIndex by remember { mutableIntStateOf(0) }&#10;&#10;    val navigationItems = listOf(&#10;        NavigationItem.Home,&#10;        NavigationItem.Incidents,&#10;        NavigationItem.Profile,&#10;        NavigationItem.Settings&#10;    )&#10;&#10;    Scaffold(&#10;        bottomBar = {&#10;            NavigationBar(&#10;                containerColor = Color.White,&#10;                contentColor = Color(0xFF1976D2)&#10;            ) {&#10;                navigationItems.forEachIndexed { index, item -&gt;&#10;                    NavigationBarItem(&#10;                        selected = selectedItemIndex == index,&#10;                        onClick = { selectedItemIndex = index },&#10;                        icon = {&#10;                            Icon(&#10;                                imageVector = item.icon,&#10;                                contentDescription = item.label&#10;                            )&#10;                        },&#10;                        label = { Text(item.label) },&#10;                        colors = NavigationBarItemDefaults.colors(&#10;                            selectedIconColor = Color(0xFF1976D2),&#10;                            selectedTextColor = Color(0xFF1976D2),&#10;                            unselectedIconColor = Color(0xFF757575),&#10;                            unselectedTextColor = Color(0xFF757575),&#10;                            indicatorColor = Color(0xFF1976D2).copy(alpha = 0.1f)&#10;                        )&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    ) { paddingValues -&gt;&#10;        when (selectedItemIndex) {&#10;            0 -&gt; Dashboard()&#10;            1 -&gt; IncidentsScreen()&#10;            2 -&gt; ProfileScreen()&#10;            3 -&gt; SettingsScreen()&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/edu/hackyeah/components/ProfileScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/edu/hackyeah/components/ProfileScreen.kt" />
              <option name="updatedContent" value="package com.edu.hackyeah.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Email&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material.icons.filled.Phone&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.material3.TopAppBarDefaults&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ProfileScreen() {&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = {&#10;                    Text(&#10;                        &quot;Profil&quot;,&#10;                        fontSize = 20.sp,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                },&#10;                colors = TopAppBarDefaults.topAppBarColors(&#10;                    containerColor = Color(0xFF1976D2),&#10;                    titleContentColor = Color.White&#10;                )&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .background(Color(0xFFF5F5F5))&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            &#10;            // Profile Avatar&#10;            Icon(&#10;                Icons.Default.Person,&#10;                contentDescription = &quot;Avatar&quot;,&#10;                modifier = Modifier&#10;                    .size(120.dp)&#10;                    .clip(CircleShape)&#10;                    .background(Color(0xFF1976D2))&#10;                    .padding(24.dp),&#10;                tint = Color.White&#10;            )&#10;            &#10;            Text(&#10;                text = &quot;Jan Kowalski&quot;,&#10;                fontSize = 24.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color(0xFF212121)&#10;            )&#10;            &#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            &#10;            // Email Card&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),&#10;                colors = CardDefaults.cardColors(containerColor = Color.White),&#10;                shape = RoundedCornerShape(12.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(16.dp)&#10;                ) {&#10;                    Icon(&#10;                        Icons.Default.Email,&#10;                        contentDescription = null,&#10;                        tint = Color(0xFF1976D2),&#10;                        modifier = Modifier.size(24.dp)&#10;                    )&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    Text(&#10;                        text = &quot;Email&quot;,&#10;                        fontSize = 12.sp,&#10;                        color = Color(0xFF757575)&#10;                    )&#10;                    Text(&#10;                        text = &quot;jan.kowalski@example.com&quot;,&#10;                        fontSize = 16.sp,&#10;                        fontWeight = FontWeight.Medium,&#10;                        color = Color(0xFF212121)&#10;                    )&#10;                }&#10;            }&#10;            &#10;            // Phone Card&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),&#10;                colors = CardDefaults.cardColors(containerColor = Color.White),&#10;                shape = RoundedCornerShape(12.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(16.dp)&#10;                ) {&#10;                    Icon(&#10;                        Icons.Default.Phone,&#10;                        contentDescription = null,&#10;                        tint = Color(0xFF1976D2),&#10;                        modifier = Modifier.size(24.dp)&#10;                    )&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    Text(&#10;                        text = &quot;Telefon&quot;,&#10;                        fontSize = 12.sp,&#10;                        color = Color(0xFF757575)&#10;                    )&#10;                    Text(&#10;                        text = &quot;+48 123 456 789&quot;,&#10;                        fontSize = 16.sp,&#10;                        fontWeight = FontWeight.Medium,&#10;                        color = Color(0xFF212121)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>