# --- STAGE 1: BUILD THE GRAPH ---
# Use a Java 21 JRE as required for OTP 2.6.x
FROM eclipse-temurin:21-jre AS build

# Set the working directory
WORKDIR /opt/otp

# Download the OpenTripPlanner 2 shaded JAR (using a representative version)
# NOTE: Replace the URL with the link to the latest stable OTP2 shaded JAR.
ENV OTP_VERSION=2.6.0
RUN apt-get update && apt-get install -y wget \
    && wget -O otp.jar "https://repo1.maven.org/maven2/org/opentripplanner/otp/$OTP_VERSION/otp-$OTP_VERSION-shaded.jar"

# Create the router directory (named 'krk' for Krakow)
RUN mkdir -p /opt/otp/graphs/krk

# Copy configuration files (created below)
COPY otp_data/build-config.json /opt/otp/graphs/krk/
COPY otp_data/router-config.json /opt/otp/graphs/krk/

# Copy your static data files here
# NOTE: You must place your GTFS and OSM files in the same directory as this Dockerfile
COPY otp_data/GTFS_KRK_A.zip /opt/otp/graphs/krk/
COPY otp_data/GTFS_KRK_M.zip /opt/otp/graphs/krk/
COPY otp_data/GTFS_KRK_T.zip /opt/otp/graphs/krk/
COPY otp_data/krk.osm.pbf /opt/otp/graphs/krk/

# Execute the graph build
# -Xmx: Allocate memory for the Java process (adjust based on your data size)
# --build: Command to build the graph from input files
# --save: Persist the built graph alongside the router directory
# graphs/krk: The path to the router directory containing config and data
RUN java -Xmx4G -jar otp.jar --build /opt/otp/graphs/krk --save

# --- STAGE 2: RUN THE SERVER ---
FROM eclipse-temurin:21-jre AS run

# Set the working directory
WORKDIR /opt/otp
EXPOSE 8080

# Copy only the necessary files from the build stage: JAR and the built graph
COPY --from=build /opt/otp/otp.jar /opt/otp/
COPY --from=build /opt/otp/graphs/krk/ /opt/otp/graphs/krk/

# Command to run the OTP server
# --server: Run in server mode
# --router: Specify the router name ('krk')
# OTP2: load the built graph and serve HTTP; pass the BASE DIR last
CMD ["java", "-Xmx2G", "-jar", "otp.jar", "--load", "--serve", "/opt/otp/graphs/krk"]
